# back to language cpp to try to bypass osx node failure
language: cpp
sudo: true
env:
  - export NODE_VERSION="8.16.1"
# pre-install to bring in the correct version of node via nvm
before_install:
  - git submodule update --init --recursive
  - git clone https://github.com/creationix/nvm.git ./.nvm
  - source ./.nvm/nvm.sh
  - nvm install $NODE_VERSION
  - nvm use $NODE_VERSION
  - npm config set python `which python`
  - if [ $TRAVIS_OS_NAME == "linux" ]; then
      export CC="gcc-4.8";
      export CXX="g++-4.8";
      export LINK="gcc-4.8";
      export LINKXX="g++-4.8";
    fi
  - gcc --version
  - g++ --version
  - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
  - echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
  - sudo apt-get update && sudo apt-get install yarn
# node 4 depends on gcc 4.8
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - gcc-4.8
# script needed to test, because defaults don't work on osx
script:
  - yarn
  - yarn test
services:
  - redis-server